// Generated by: main
// TypeWriter: flags
// Directive: +gen on Bits

package example

import (
	"encoding/json"
	"errors"
)

// BitsList is a slice of Bits.
type BitsList []Bits

// ErrMutex says that a result had more than one mutually exclusive bit set.
var ErrMutex = errors.New("attempt to set mutually exclusive bits")

// Set turns a particular bit or set of bits on.
func (f *Bits) Set(v Bits) (Bits, error) {
	x := *f | v

	x = x & MutuallyExclusive
	if !x.IsEmpty() && !(x & (x - 1)).IsEmpty() {
		return *f, ErrMutex
	}

	*f = x
	return *f, nil
}

// Unset turns a particular bit or set of bits off.
func (f *Bits) Unset(v Bits) (Bits, error) {
	x := *f &^ v

	x = x & MutuallyExclusive
	if !x.IsEmpty() && !(x & (x - 1)).IsEmpty() {
		return *f, ErrMutex
	}

	*f = x
	return *f, nil
}

// IsEmpty is true if no bits are on.
func (f Bits) IsEmpty() bool {
	return f == 0
}

// IsSet determines if a Flags has a particular bit or set of bits on.
func (f Bits) IsSet(v Bits) bool {
	return f&v != 0
}

// Unpack creates a BitsList from a single Bits, with each item in the list
// having only a single bit on.
func (f Bits) Unpack() BitsList {
	var v Bits
	fl := BitsList{}

	for v = 1; v <= 1<<31; v <<= 1 {
		if f.IsSet(v) {
			fl = append(fl, v)
		}
		if v == 1<<31 {
			break
		}
	}

	return fl
}

// Pack packs a BitsList into a single Bits value.
func (fl BitsList) Pack() (Bits, error) {
	var f Bits
	var err error

	for _, v := range fl {
		f, err = f.Set(v)
		if err != nil {
			return 0, err
		}
	}

	return f, nil
}

// Unstring turns the string representation of a Bits into a Bits value.
// This is meant to be used with constants that have had String() and
// JSON Marshal/Unmarshal routines generated with stringer and jsonenums.
func Unstring(s string) (Bits, error) {
	var f Bits
	err := json.Unmarshal([]byte("\""+s+"\""), &f)
	if err != nil {
		return 0, err
	}
	return f, nil
}

// PackStrings takes a slice of string representations of Bits and packs
// them into a single Flags value.
func PackStrings(fs []string) (Bits, error) {
	var f, v Bits
	var err error

	for _, s := range fs {
		v, err = Unstring(s)
		if err != nil {
			return 0, err
		}

		f, err = f.Set(v)
		if err != nil {
			return 0, err
		}
	}

	return f, nil
}
