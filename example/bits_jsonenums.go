// generated by jsonenums -type=Bits; DO NOT EDIT

package example

import (
	"encoding/json"
	"fmt"
)

var (
	_BitsNameToValue = map[string]Bits{
		"Bit01":   Bit01,
		"Bit02":   Bit02,
		"Bit03":   Bit03,
		"Bit04":   Bit04,
		"Bit05":   Bit05,
		"Bit06":   Bit06,
		"Bit07":   Bit07,
		"Bit08":   Bit08,
		"Bit09":   Bit09,
		"Bit10":   Bit10,
		"Bit11":   Bit11,
		"Bit12":   Bit12,
		"Bit13":   Bit13,
		"Bit14":   Bit14,
		"Bit15":   Bit15,
		"Bit16":   Bit16,
		"Bit17":   Bit17,
		"Bit18":   Bit18,
		"Bit19":   Bit19,
		"Bit20":   Bit20,
		"Bit21":   Bit21,
		"Bit22":   Bit22,
		"Bit23":   Bit23,
		"Bit24":   Bit24,
		"Bit25":   Bit25,
		"Bit26":   Bit26,
		"Bit27":   Bit27,
		"Bit28":   Bit28,
		"Bit29":   Bit29,
		"Bit30":   Bit30,
		"Bit31":   Bit31,
		"Bit32":   Bit32,
		"AnyEven": AnyEven,
		"AnyOdd":  AnyOdd,
	}

	_BitsValueToName = map[Bits]string{
		Bit01:   "Bit01",
		Bit02:   "Bit02",
		Bit03:   "Bit03",
		Bit04:   "Bit04",
		Bit05:   "Bit05",
		Bit06:   "Bit06",
		Bit07:   "Bit07",
		Bit08:   "Bit08",
		Bit09:   "Bit09",
		Bit10:   "Bit10",
		Bit11:   "Bit11",
		Bit12:   "Bit12",
		Bit13:   "Bit13",
		Bit14:   "Bit14",
		Bit15:   "Bit15",
		Bit16:   "Bit16",
		Bit17:   "Bit17",
		Bit18:   "Bit18",
		Bit19:   "Bit19",
		Bit20:   "Bit20",
		Bit21:   "Bit21",
		Bit22:   "Bit22",
		Bit23:   "Bit23",
		Bit24:   "Bit24",
		Bit25:   "Bit25",
		Bit26:   "Bit26",
		Bit27:   "Bit27",
		Bit28:   "Bit28",
		Bit29:   "Bit29",
		Bit30:   "Bit30",
		Bit31:   "Bit31",
		Bit32:   "Bit32",
		AnyEven: "AnyEven",
		AnyOdd:  "AnyOdd",
	}
)

func init() {
	var v Bits
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_BitsNameToValue = map[string]Bits{
			interface{}(Bit01).(fmt.Stringer).String():   Bit01,
			interface{}(Bit02).(fmt.Stringer).String():   Bit02,
			interface{}(Bit03).(fmt.Stringer).String():   Bit03,
			interface{}(Bit04).(fmt.Stringer).String():   Bit04,
			interface{}(Bit05).(fmt.Stringer).String():   Bit05,
			interface{}(Bit06).(fmt.Stringer).String():   Bit06,
			interface{}(Bit07).(fmt.Stringer).String():   Bit07,
			interface{}(Bit08).(fmt.Stringer).String():   Bit08,
			interface{}(Bit09).(fmt.Stringer).String():   Bit09,
			interface{}(Bit10).(fmt.Stringer).String():   Bit10,
			interface{}(Bit11).(fmt.Stringer).String():   Bit11,
			interface{}(Bit12).(fmt.Stringer).String():   Bit12,
			interface{}(Bit13).(fmt.Stringer).String():   Bit13,
			interface{}(Bit14).(fmt.Stringer).String():   Bit14,
			interface{}(Bit15).(fmt.Stringer).String():   Bit15,
			interface{}(Bit16).(fmt.Stringer).String():   Bit16,
			interface{}(Bit17).(fmt.Stringer).String():   Bit17,
			interface{}(Bit18).(fmt.Stringer).String():   Bit18,
			interface{}(Bit19).(fmt.Stringer).String():   Bit19,
			interface{}(Bit20).(fmt.Stringer).String():   Bit20,
			interface{}(Bit21).(fmt.Stringer).String():   Bit21,
			interface{}(Bit22).(fmt.Stringer).String():   Bit22,
			interface{}(Bit23).(fmt.Stringer).String():   Bit23,
			interface{}(Bit24).(fmt.Stringer).String():   Bit24,
			interface{}(Bit25).(fmt.Stringer).String():   Bit25,
			interface{}(Bit26).(fmt.Stringer).String():   Bit26,
			interface{}(Bit27).(fmt.Stringer).String():   Bit27,
			interface{}(Bit28).(fmt.Stringer).String():   Bit28,
			interface{}(Bit29).(fmt.Stringer).String():   Bit29,
			interface{}(Bit30).(fmt.Stringer).String():   Bit30,
			interface{}(Bit31).(fmt.Stringer).String():   Bit31,
			interface{}(Bit32).(fmt.Stringer).String():   Bit32,
			interface{}(AnyEven).(fmt.Stringer).String(): AnyEven,
			interface{}(AnyOdd).(fmt.Stringer).String():  AnyOdd,
		}
	}
}

func (r Bits) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _BitsValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Bits: %d", r)
	}
	return json.Marshal(s)
}

func (r *Bits) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Bits should be a string, got %s", data)
	}
	v, ok := _BitsNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Bits %q", s)
	}
	*r = v
	return nil
}
