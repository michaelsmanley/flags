// Generated by: main
// TypeWriter: flags
// Directive: +gen on Bits

package example

import (
	"encoding/json"
	"errors"
)

// BitsSlice is a slice of Bits.
type BitsSlice []Bits

// ErrMutex says that a result had more than one mutually exclusive bit set.
var ErrMutex = errors.New("attempt to set mutually exclusive Bits")

// Punch turns a particular bit or set of Bits on.
// If a bit that is part of a mutually exclusive set is
// turned on, all of the other bits in that set will be
// turned off. If multiple bits in the mutually exclusive
// set are turned on, only the highest bit will remain on.
func (f *Bits) Punch(v Bits) Bits {
	var x Bits

	s := v.Unpack()
	for _, b := range s {
		x = *f | b
		y := x & MutuallyExclusive
		if !y.IsEmpty() && !(y & (y - 1)).IsEmpty() {
			z := x &^ MutuallyExclusive
			x = z | b
		}
	}

	*f = x
	return x
}

// Set turns a particular bit or set of Bits on, and
// returns ErrMutex if an attempt is made to turn mutually exclusive
// bits on at the same time.
func (f *Bits) Set(v Bits) (Bits, error) {
	x := *f | v

	y := x & MutuallyExclusive
	if !y.IsEmpty() && !(y & (y - 1)).IsEmpty() {
		return *f, ErrMutex
	}

	*f = x
	return x, nil
}

// Unset turns a particular bit or set of Bits off.
func (f *Bits) Unset(v Bits) (Bits, error) {
	x := *f &^ v

	*f = x
	return x, nil
}

// IsEmpty is true if no Bits are on.
func (f Bits) IsEmpty() bool {
	return f == 0
}

// IsSet determines if a Flags has a particular bit or set of Bits on.
func (f Bits) IsSet(v Bits) bool {
	return f&v != 0
}

// Unpack creates a BitsSlice from a single Bits, with each item in the list
// having only a single bit on.
func (f Bits) Unpack() BitsSlice {
	var v Bits
	fl := BitsSlice{}

	for v = 1; v <= 1<<31; v <<= 1 {
		if f.IsSet(v) {
			fl = append(fl, v)
		}
		if v == 1<<31 {
			break
		}
	}

	return fl
}

// Pack packs a BitsSlice into a single Bits value.
func (fl BitsSlice) Pack() (Bits, error) {
	var f Bits
	var err error

	for _, v := range fl {
		f, err = f.Set(v)
		if err != nil {
			return 0, err
		}
	}

	return f, nil
}

// Unstring turns the string representation of a Bits into a Bits value.
// This is meant to be used with constants that have had String() and
// JSON Marshal/Unmarshal routines generated with stringer and jsonenums.
func Unstring(s string) (Bits, error) {
	var f Bits
	err := json.Unmarshal([]byte("\""+s+"\""), &f)
	if err != nil {
		return 0, err
	}
	return f, nil
}

// PackStrings takes a slice of string representations of Bits and packs
// them into a single Flags value.
func PackStrings(fs []string) (Bits, error) {
	var f, v Bits
	var err error

	for _, s := range fs {
		v, err = Unstring(s)
		if err != nil {
			return 0, err
		}

		f, err = f.Set(v)
		if err != nil {
			return 0, err
		}
	}

	return f, nil
}
